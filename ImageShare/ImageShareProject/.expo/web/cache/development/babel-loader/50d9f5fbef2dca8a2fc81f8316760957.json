{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\LeoPM\\\\Documents\\\\Estudos\\\\ImageShare\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Sharing from 'expo-sharing';\nimport uploadToAnonymousFilesAsync from 'anonymous-files';\nexport default function App() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedImage = _React$useState2[0],\n      setSelectedImage = _React$useState2[1];\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult, remoteUri;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert(\"Permission to access camera roll is required\");\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            if (!(Platform.OS === 'web')) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(uploadToAnonymousFilesAsync(pickerResult.uri));\n\n          case 14:\n            remoteUri = _context.sent;\n            setSelectedImage({\n              localUri: pickerResult.uri,\n              remoteUri: remoteUri\n            });\n            _context.next = 19;\n            break;\n\n          case 18:\n            setSelectedImage({\n              localUri: pickerResult.uri,\n              remoteUri: null\n            });\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var openShareDialogAsync = function openShareDialogAsync() {\n    return _regeneratorRuntime.async(function openShareDialogAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Sharing.isAvailableAsync());\n\n          case 2:\n            if (_context2.sent) {\n              _context2.next = 5;\n              break;\n            }\n\n            alert(\"The image is avaiable for sharing at: \" + selectedImage.remoteUri);\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(Sharing.shareAsync(selectedImage.localUri));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var clearImageState = function clearImageState() {\n    return _regeneratorRuntime.async(function clearImageState$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            setSelectedImage(null);\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (selectedImage !== null) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: selectedImage.localUri\n      },\n      style: styles.thumbnail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }), React.createElement(PressableButton, {\n      onPress: openShareDialogAsync,\n      buttonText: \"Share this photo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }), React.createElement(PressableButton, {\n      onPress: clearImageState,\n      buttonText: \"Choose other photo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }));\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: \"https://i.imgur.com/TkIrScD.png\"\n    },\n    style: styles.logo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"To share a photos from your phone with a friend, just press the button below!\"), React.createElement(PressableButton, {\n    onPress: openImagePickerAsync,\n    buttonText: \"Pick a photo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction PressableButton(props) {\n  return React.createElement(TouchableOpacity, {\n    onPress: props.onPress,\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 10\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, props.buttonText));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  logo: {\n    width: 305,\n    height: 159,\n    marginBottom: 10\n  },\n  instructions: {\n    color: '#888',\n    fontSize: 18,\n    marginHorizontal: 15,\n    justifyContent: 'space-evenly'\n  },\n  button: {\n    backgroundColor: 'blue',\n    padding: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: \"contain\"\n  }\n});","map":{"version":3,"sources":["C:/Users/LeoPM/Documents/Estudos/ImageShare/App.js"],"names":["StatusBar","React","ImagePicker","Sharing","uploadToAnonymousFilesAsync","App","useState","selectedImage","setSelectedImage","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","cancelled","Platform","OS","uri","remoteUri","localUri","openShareDialogAsync","isAvailableAsync","shareAsync","clearImageState","styles","container","thumbnail","logo","instructions","PressableButton","props","onPress","button","buttonText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","height","marginBottom","color","fontSize","marginHorizontal","padding","borderRadius","resizeMode"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport {Image, Platform, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Sharing from 'expo-sharing';\nimport uploadToAnonymousFilesAsync from 'anonymous-files';\n\nexport default function App() {\nconst [selectedImage, setSelectedImage] = React.useState(null);\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n    if(permissionResult.granted === false)\n    {\n      alert(\"Permission to access camera roll is required\");\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n    if(pickerResult.cancelled === true) {\n      return;\n    }\n    \n    if(Platform.OS === 'web')\n    {\n      let remoteUri = await uploadToAnonymousFilesAsync(pickerResult.uri);\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri });\n    }\n    else\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri: null });\n\n    };\n\n    let openShareDialogAsync = async () => {\n      if (!(await Sharing.isAvailableAsync())){\n        alert(`The image is avaiable for sharing at: ${selectedImage.remoteUri}`);\n        return;\n      }\n\n      await Sharing.shareAsync(selectedImage.localUri);\n    };\n\n    let clearImageState = async () => {\n      setSelectedImage(null);\n    }\n\n\n  if(selectedImage !== null) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{ uri: selectedImage.localUri }}\n          style={styles.thumbnail}/>\n          <PressableButton onPress={openShareDialogAsync} buttonText=\"Share this photo\" />\n          <PressableButton onPress={clearImageState} buttonText=\"Choose other photo\" />\n          \n      </View>\n    )\n  }\n\n  return (\n    <View style={styles.container}>\n      <Image source={{ uri: \"https://i.imgur.com/TkIrScD.png\" }} style={styles.logo}></Image>\n\n      <Text style={styles.instructions}>\n        To share a photos from your phone with a friend, just press the button below!\n        </Text>\n        <PressableButton onPress={openImagePickerAsync} buttonText=\"Pick a photo\" />\n\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nfunction PressableButton(props)\n{\n  return <TouchableOpacity onPress={props.onPress} style={styles.button}>\n    <Text style={styles.buttonText}>{props.buttonText}</Text>\n  </TouchableOpacity>\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  logo: {\n    width: 305,\n    height: 159,\n    marginBottom: 10,\n  },\n  instructions: {\n    color: '#888',\n    fontSize: 18,\n    marginHorizontal: 15,\n    justifyContent: 'space-evenly'\n  },\n  button: {\n    backgroundColor: 'blue',\n    padding: 20,\n    borderRadius: 5,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: \"contain\"\n  },\n});\n"]},"metadata":{},"sourceType":"module"}